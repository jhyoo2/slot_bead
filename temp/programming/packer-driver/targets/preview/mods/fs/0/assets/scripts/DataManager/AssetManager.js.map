{"version":3,"sources":["file:///Users/david/Desktop/David/cocos/slot_bead/assets/scripts/DataManager/AssetManager.ts"],"names":["_decorator","Component","Prefab","SpriteFrame","resources","ImageAsset","Texture2D","ccclass","property","AssetManager","path","type","dict","assetDic","prefabDic","getInstance","myInstance","instance","loadFolder","folderName","callback","Promise","resolve","reject","loadDir","err","assets","console","log","i","fileName","name","data","myFile","split","length","assetLoaded","idx","resouceLength","resourceCB","loadAssets","self","resultArray","assetArray","resultIdx","readImgAsync","fileResult","img","Image","onload","onerror","src","loadImgFromURL","url","xhr","XMLHttpRequest","reader","FileReader","onloadend","result","imgResult","imgAsset","spriteFrame","tex","image","texture","imgFile","readerResult","readAsDataURL","response","open","responseType","send"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Component,\n  SpriteAtlas,\n  Prefab,\n  SpriteFrame,\n  JsonAsset,\n  AudioClip,\n  resources,\n  assetManager,\n  ImageAsset,\n  Texture2D,\n} from \"cc\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"AssetManager\")\nexport default class AssetManager extends Component {\n  static instance = null;\n  assetDic = {};\n  atlasDic = {};\n  prefabDic = {};\n  spineDic = {};\n  musicDic = {};\n  textDic = {};\n  resourceCB = null;\n  assetArray = [\n    { path: \"Texture/Slot\", type: SpriteFrame, dict: this.assetDic },\n    { path: \"Texture/RoomScene\", type: SpriteFrame, dict: this.assetDic },\n    { path: \"Texture/DiceScene\", type: SpriteFrame, dict: this.assetDic },\n    { path: \"Texture/Deco\", type: SpriteFrame, dict: this.assetDic },\n    { path: \"Prefab\", type: Prefab, dict: this.prefabDic },\n  ];\n  public static getInstance() {\n    // ////////////////////////\n    var myInstance = AssetManager.instance;\n    if (!myInstance) {\n      myInstance = new AssetManager();\n      AssetManager.instance = myInstance;\n    }\n    // ////////////////////////\n    return myInstance;\n  }\n  async loadFolder(folderName, type, dict, callback) {\n    return new Promise((resolve, reject) => {\n      resources.loadDir(folderName, type, (err, assets: any) => {\n        if (err) {\n          console.log(err);\n          reject(err);\n        } else {\n          //   if (folderName === \"Prefab\") {\n          //     console.log(assets);\n          //   }\n          for (var i in assets) {\n            var fileName = assets[i].name;\n            if (folderName === \"Prefab\") {\n              fileName = assets[i].data.name;\n            }\n            var myFile = folderName.split(\"/\");\n            if (myFile.length >= 2) {\n              dict[myFile[1] + \"/\" + fileName] = assets[i];\n            } else {\n              dict[fileName] = assets[i];\n            }\n          }\n          resolve(callback(folderName));\n        }\n      });\n    });\n  }\n  assetLoaded(idx, resouceLength) {\n    // // console.log(\"path : \", path);\n    if (this.resourceCB) {\n      this.resourceCB(idx, resouceLength);\n    }\n  }\n  async loadAssets() {\n    var self = this;\n    var resultArray = this.assetArray;\n    var resultIdx = 0;\n    return new Promise(async (resolve, reject) => {\n      while (1) {\n        await this.loadFolder(\n          resultArray[resultIdx].path,\n          resultArray[resultIdx].type,\n          resultArray[resultIdx].dict,\n          (folderName) => {\n            // // console.log(folderName);\n            resultIdx++;\n          }\n        );\n        if (resultIdx <= resultArray.length) {\n          self.assetLoaded(resultIdx, resultArray.length);\n        }\n        // // console.log(this);\n        if (resultIdx === resultArray.length) {\n          //   console.log(\"resource load complete\");\n          resolve(\"complete\");\n          break;\n        }\n      }\n    });\n  }\n  readImgAsync(fileResult) {\n    return new Promise((resolve, reject) => {\n      var img = new Image();\n      img.onload = () => {\n        resolve(img);\n      };\n      img.onerror = reject;\n      img.src = fileResult;\n    });\n  }\n  loadImgFromURL(url: string) {\n    return new Promise((resolve, reject) => {\n      const self = this;\n      let xhr = new XMLHttpRequest();\n      xhr.onload = () => {\n        let reader = new FileReader();\n        reader.onloadend = async () => {\n          const imgResult = (await self.readImgAsync(reader.result)) as any;\n          const imgAsset = new ImageAsset(imgResult);\n          const spriteFrame = new SpriteFrame();\n          const tex = new Texture2D();\n          tex.image = imgAsset;\n          spriteFrame.texture = tex;\n          resolve({\n            spriteFrame: spriteFrame,\n            imgFile: imgResult,\n            readerResult: reader.result,\n          });\n        };\n        reader.readAsDataURL(xhr.response);\n      };\n      xhr.open(\"GET\", url);\n      xhr.responseType = \"blob\";\n      xhr.send();\n    });\n  }\n  // // update (dt) {},\n}\n"]}