{"version":3,"sources":["file:///Users/david/Desktop/David/cocos/slot_bead/assets/scripts/DataManager/AssetManager.ts"],"names":["_decorator","Component","Prefab","SpriteFrame","resources","ImageAsset","Texture2D","ccclass","property","AssetManager","path","type","dict","assetDic","prefabDic","getInstance","myInstance","instance","loadFolder","folderName","callback","Promise","resolve","reject","loadDir","err","assets","console","log","i","fileName","name","data","myFile","split","length","assetLoaded","idx","resouceLength","resourceCB","loadAssets","self","resultArray","assetArray","resultIdx","readImgAsync","fileResult","img","Image","onload","onerror","src","loadImgFromURL","url","xhr","XMLHttpRequest","reader","FileReader","onloadend","imgResult","result","imgAsset","spriteFrame","tex","image","texture","imgFile","readerResult","readAsDataURL","response","open","responseType","send"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Component,\n  SpriteAtlas,\n  Prefab,\n  SpriteFrame,\n  JsonAsset,\n  AudioClip,\n  resources,\n  assetManager,\n  ImageAsset,\n  Texture2D,\n} from \"cc\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"AssetManager\")\nexport default class AssetManager extends Component {\n  static instance = null;\n  assetDic = {};\n  atlasDic = {};\n  prefabDic = {};\n  spineDic = {};\n  musicDic = {};\n  textDic = {};\n  resourceCB = null;\n  assetArray = [\n    { path: \"Texture/Slot\", type: SpriteFrame, dict: this.assetDic },\n    { path: \"Texture/RoomScene\", type: SpriteFrame, dict: this.assetDic },\n    { path: \"Texture/DiceScene\", type: SpriteFrame, dict: this.assetDic },\n    { path: \"Texture/Deco\", type: SpriteFrame, dict: this.assetDic },\n    { path: \"Prefab\", type: Prefab, dict: this.prefabDic },\n  ];\n  public static getInstance() {\n    // ////////////////////////\n    var myInstance = AssetManager.instance;\n    if (!myInstance) {\n      myInstance = new AssetManager();\n      AssetManager.instance = myInstance;\n    }\n    // ////////////////////////\n    return myInstance;\n  }\n  async loadFolder(folderName, type, dict, callback) {\n    return new Promise((resolve, reject) => {\n      resources.loadDir(folderName, type, (err, assets: any) => {\n        if (err) {\n          console.log(err);\n          reject(err);\n        } else {\n          //   if (folderName === \"Prefab\") {\n          //     console.log(assets);\n          //   }\n          for (var i in assets) {\n            var fileName = assets[i].name;\n            if (folderName === \"Prefab\") {\n              fileName = assets[i].data.name;\n            }\n            var myFile = folderName.split(\"/\");\n            if (myFile.length >= 2) {\n              dict[myFile[1] + \"/\" + fileName] = assets[i];\n            } else {\n              dict[fileName] = assets[i];\n            }\n          }\n          resolve(callback(folderName));\n        }\n      });\n    });\n  }\n  assetLoaded(idx, resouceLength) {\n    // // console.log(\"path : \", path);\n    if (this.resourceCB) {\n      this.resourceCB(idx, resouceLength);\n    }\n  }\n  async loadAssets() {\n    var self = this;\n    var resultArray = this.assetArray;\n    var resultIdx = 0;\n    return new Promise(async (resolve, reject) => {\n      while (1) {\n        await this.loadFolder(\n          resultArray[resultIdx].path,\n          resultArray[resultIdx].type,\n          resultArray[resultIdx].dict,\n          (folderName) => {\n            // // console.log(folderName);\n            resultIdx++;\n          }\n        );\n        if (resultIdx <= resultArray.length) {\n          self.assetLoaded(resultIdx, resultArray.length);\n        }\n        // // console.log(this);\n        if (resultIdx === resultArray.length) {\n          //   console.log(\"resource load complete\");\n          resolve(\"complete\");\n          break;\n        }\n      }\n    });\n  }\n  readImgAsync(fileResult) {\n    return new Promise((resolve, reject) => {\n      var img = new Image();\n      img.onload = () => {\n        resolve(img);\n      };\n      img.onerror = reject;\n      img.src = fileResult;\n    });\n  }\n  loadImgFromURL(url: string) {\n    return new Promise((resolve, reject) => {\n      const self = this;\n      let xhr = new XMLHttpRequest();\n      xhr.onload = () => {\n        let reader = new FileReader();\n        reader.onloadend = async () => {\n          const imgResult = (await self.readImgAsync(reader.result)) as any;\n          const imgAsset = new ImageAsset(imgResult);\n          const spriteFrame = new SpriteFrame();\n          const tex = new Texture2D();\n          tex.image = imgAsset;\n          spriteFrame.texture = tex;\n          resolve({\n            spriteFrame: spriteFrame,\n            imgFile: imgResult,\n            readerResult: reader.result,\n          });\n        };\n        reader.readAsDataURL(xhr.response);\n      };\n      xhr.open(\"GET\", url);\n      xhr.responseType = \"blob\";\n      xhr.send();\n    });\n  }\n  // // update (dt) {},\n}\n"]}