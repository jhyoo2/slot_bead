{"version":3,"sources":["file:///Users/david/Desktop/David/cocos/slot_deco/assets/scripts/Prefabs/Dice/SlotMaster.ts"],"names":["_decorator","Component","Node","size","UITransform","instantiate","AssetManager","ccclass","property","SlotMaster","initSlotMaster","slotData","assetManager","getInstance","backNode","getComponent","setContentSize","slotSize","maskNode","iconDiff","iconSize","width","columnNum","height","rowNum","railSize","i","slotLine","prefabDic","insertChild","setPosition","lineScript","initSlotLine","slotLineArray","push","rollWithNetwork","slotResultDic","lineObject","slotStartInfinity","sleep","stopSlot","Number","getSlotResult","bind","iconKind","backKind","t","Promise","resolve","setTimeout","rollWithRandom","slotStart","rollWithFixed","iconDatas","lineIdx","result","Object","keys","length","slotManager"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Component,\n  Node,\n  size,\n  UITransform,\n  instantiate,\n  Size,\n} from \"cc\";\nconst { ccclass, property } = _decorator;\n\nimport AssetManager from \"../../DataManager/AssetManager\";\nimport SlotManager from \"../SlotManager\";\nimport SlotLine from \"./SlotLine\";\n\n@ccclass(\"SlotMaster\")\nexport default class SlotMaster extends Component {\n  @property(Node)\n  backNode: Node | null = null;\n  @property(Node)\n  maskNode: Node | null = null;\n  assetManager: AssetManager = null;\n  slotManager: SlotManager = null;\n  slotData: {\n    rowNum: number;\n    columnNum: number;\n    slotSize: Size;\n    iconDiff: number;\n    iconSize: Size;\n    railSize: Size;\n  };\n  slotLineArray: Node[] = [];\n  slotResultDic: Object = {};\n  initSlotMaster(slotData) {\n    this.assetManager = AssetManager.getInstance();\n    this.slotData = slotData;\n    this.backNode.getComponent(UITransform).setContentSize(slotData.slotSize);\n    this.maskNode.getComponent(UITransform).setContentSize(slotData.slotSize);\n\n    this.slotData.iconDiff = 20;\n    this.slotData.iconSize = size(\n      slotData.slotSize.width / slotData.columnNum - this.slotData.iconDiff,\n      (slotData.slotSize.height / (slotData.rowNum + 1)) * 1.15 -\n        this.slotData.iconDiff\n    );\n    this.slotData.railSize = size(\n      this.slotData.iconSize.width + this.slotData.iconDiff,\n      (this.slotData.iconSize.height + this.slotData.iconDiff) *\n        (slotData.rowNum + 4)\n    );\n\n    // // init SlotLine\n    for (var i = 0; i < slotData.columnNum; i++) {\n      const slotLine = instantiate(this.assetManager.prefabDic[\"SlotLine\"]);\n      this.maskNode.insertChild(slotLine, 10);\n      slotLine.setPosition(\n        -slotData.slotSize.width / 2 + this.slotData.railSize.width * (i + 0.5),\n        0\n      );\n      const lineScript: SlotLine = slotLine.getComponent(\"SlotLine\");\n      lineScript.initSlotLine(i, this.slotData);\n      this.slotLineArray.push(slotLine);\n    }\n  }\n\n  async rollWithNetwork() {\n    this.slotResultDic = {};\n    // // console.log(\"master in\");\n    for (var i in this.slotLineArray) {\n      const lineObject = this.slotLineArray[i];\n      const lineScript = lineObject.getComponent(\"SlotLine\") as SlotLine;\n      lineScript.slotStartInfinity(2 / 30);\n    }\n    await this.sleep(1000);\n    //     console.log(\"hello?\");\n    for (var i in this.slotLineArray) {\n      const lineObject = this.slotLineArray[i];\n      const lineScript = lineObject.getComponent(\"SlotLine\") as SlotLine;\n      lineScript.stopSlot(\n        5 + 10 * Number(i),\n        0.5 + 0.5 * Number(i),\n        this.getSlotResult.bind(this),\n        { iconKind: 2, backKind: Number(i) + 1 }\n      );\n    }\n  }\n\n  sleep(t) {\n    return new Promise((resolve) => setTimeout(resolve, t));\n  }\n  rollWithRandom() {\n    this.slotResultDic = {};\n    for (var i in this.slotLineArray) {\n      const lineObject = this.slotLineArray[i];\n      const lineScript = lineObject.getComponent(\"SlotLine\") as SlotLine;\n      lineScript.slotStart(31, 2, this.getSlotResult.bind(this));\n    }\n  }\n  rollWithFixed(iconDatas) {\n    this.slotResultDic = {};\n    for (var i in this.slotLineArray) {\n      const lineObject = this.slotLineArray[i];\n      const lineScript = lineObject.getComponent(\"SlotLine\") as SlotLine;\n      lineScript.slotStart(\n        31 + 4 * Number(i),\n        1.0 + 0.5 * Number(i),\n        this.getSlotResult.bind(this),\n        iconDatas[i]\n      );\n    }\n  }\n  getSlotResult(lineIdx, result) {\n    // // console.log(lineIdx, result);\n    this.slotResultDic[lineIdx] = result;\n    if (Object.keys(this.slotResultDic).length == this.slotData.columnNum) {\n      this.slotManager.getSlotResult(this.slotResultDic);\n    }\n  }\n}\n"]}